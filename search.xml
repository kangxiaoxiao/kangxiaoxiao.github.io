<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[canvas绘图并下载]]></title>
    <url>%2F2018%2F05%2F16%2Fcanvas%E7%BB%98%E5%9B%BE%E5%B9%B6%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[canvas绘制图片并下载,结合vue： 第一步：html代码 1234567&lt;div class=&quot;canvas_wrapper&quot;&gt; &lt;canvas id=&quot;canvas1&quot; width=&quot;180px&quot; height=&quot;180px&quot;&gt;&lt;/canvas&gt; &lt;br /&gt;&lt;br /&gt; &lt;input type=&quot;button&quot; value=&quot;保存png图片&quot; id=&quot;btn1&quot; @click=&quot;download(&apos;png&apos;)&quot;/&gt; &lt;input type=&quot;button&quot; value=&quot;保存jpg图片&quot; id=&quot;btn2&quot; @click=&quot;download(&apos;jpg&apos;)&quot;/&gt; &lt;/div&gt; 第二步：引入img路径 12import backgroundImg from &quot;@/assets/images/user_img.jpeg&quot;; 第三步：js方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//初始化，绘制图片init:function()&#123; let _this=this; //绘制图片 let canvas = document.getElementById(&apos;canvas1&apos;); let ctx = canvas.getContext(&apos;2d&apos;); ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.fillStyle = &quot;red&quot;; //将图片画在画布上 let image = new Image(); image.src = backgroundImg; image.onload = function() &#123; ctx.drawImage(image, 0, 0, 180, 180); ctx.font = &apos;italic bold 15px Helvetica &apos;; ctx.fillText(&apos;点点&apos;, 20, 20); &#125;&#125;,//图片下载操作,指定图片类型download:function (type) &#123; let _this=this; var canvas = document.getElementById(&apos;canvas1&apos;); //设置保存图片的类型 var imgdata = canvas.toDataURL(type); //将mime-type改为image/octet-stream,强制让浏览器下载 var fixtype = function (type) &#123; type = type.toLocaleLowerCase().replace(/jpg/i, &apos;jpeg&apos;); var r = type.match(/png|jpeg|bmp|gif/)[0]; return &apos;image/&apos; + r; &#125; imgdata = imgdata.replace(fixtype(type), &apos;image/octet-stream&apos;) //定义保存的图片名称 var filename = new Date().toLocaleDateString() + &apos;.&apos; + type; _this.saveFile(imgdata, filename);&#125;,//将图片保存到本地saveFile:function (data, filename) &#123; var link = document.createElement(&apos;a&apos;); link.href = data; link.download = filename; var event = document.createEvent(&apos;MouseEvents&apos;); event.initMouseEvent(&apos;click&apos;, true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null); link.dispatchEvent(event);&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用正则表达式]]></title>
    <url>%2F2018%2F05%2F14%2F%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[常用正则表达式：1、只能输入汉字、字母和数字1/^[a-zA-Z0-9\u4e00-\u9fa5]+$/]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生JS文件上传]]></title>
    <url>%2F2018%2F05%2F11%2F%E5%8E%9F%E7%94%9FJS%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[最近整了一个图片上传的东西，由于上传的时候还需要上传其它的参数，所以用原生JS整了一套。结合Vue.第一步：用input标签，用作图片上传12345678&lt;input class=&quot;uploadInput&quot; name=&quot;txtName&quot; type=&quot;file&quot; @change=&quot;loadImage(this)&quot; ref=&quot;file&quot;/&gt; 用img标签用作图片的展示12345&lt;div class=&quot;img_wrapper&quot;&gt; &lt;img :src=&quot;curUserMsg.portrait&quot;&gt;&lt;/div&gt; 数据提交123&lt;div class=&quot;btn_wrapper&quot;&gt; &lt;button @click=&quot;submit&quot; type=&quot;button&quot;&gt;提交&lt;/button&gt;&lt;/div&gt; 第二步：数据初始化12345678910data()&#123; return&#123; imageFile:&quot;&quot;, curUserMsg:&#123; &quot;portrait&quot;:&quot;&quot; &#125; &#125;&#125; 第三步：JS 处理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677submit:function()&#123; //提交上传的图片信息 let imgFile=this.imageFile.files[0]; if(imgFile)&#123; console.log(&quot;提交的图片信息&quot;,imgFile); &#125;else&#123; console.log(&quot;请先上传图片&quot;) &#125;&#125;,loadImage:function()&#123; var img=this.$refs.file; this.imageFile=this.$refs.file; console.log(&quot;图片信息&quot;,img); console.log(&quot;图片路径&quot;,img.value); console.log(&quot;图片信息&quot;,img.files); var filePath = img.value; var fileExt = filePath.substring(filePath.lastIndexOf(&quot;.&quot;)) .toLowerCase(); if (!this.checkFileExt(fileExt)) &#123; alert(&quot;您上传的文件不是图片,请重新上传！&quot;,&quot;warning&quot;); img.value = &quot;&quot;; return; &#125; if (img.files &amp;&amp; img.files[0]) &#123;// alert(img);// alert(img.files[0]) console.log(&apos;你选择的文件大小&apos; + (img.files[0].size / 1024).toFixed(0) + &quot;kb&quot;); //长传的图片的大小的拦截 if((img.files[0].size / 1024).toFixed(0)&gt;100)&#123; alert(&quot;上传的头像不能大于100Kb&quot;,&quot;error&quot;); img.value = &quot;&quot;; return; &#125;// var xx = img.files[0];// for (var i in xx) &#123;// alert(xx[i])// &#125; console.log(&quot;上传成功&quot;,filePath); this.curUserMsg.portrait=this.getObjectURL(img.files[0]); console.log(&apos;上传成功的头像&apos;,this.curUserMsg.portrait); &#125; else &#123; img.select(); var url = document.selection.createRange().text; try &#123; var fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;); &#125; catch (e) &#123; console.log(&apos;如果你用的是ie8以下 请将安全级别调低！&apos;); &#125; console.log(&quot;文件大小为：&quot; + (fso.GetFile(url).size / 1024).toFixed(0) + &quot;kb&quot;); &#125;&#125;, checkFileExt:function(ext) &#123; if (!ext.match(/.jpg|.png|.jpeg/i)) &#123; return false; &#125; return true;&#125;,//图片预览getObjectURL:function(file) &#123; var url = null; if (window.createObjectURL != undefined) &#123; // url = window.createObjectURL(file); &#125; else if (window.URL != undefined) &#123; //仅简单的验证仅如下的浏览器支持 webkit or chrome ie11 ie10 firefox oprea url = window.URL.createObjectURL(file); &#125; else if (window.webkitURL != undefined) &#123; // webkit or chrome url = window.webkitURL.createObjectURL(file); &#125; return url;&#125; &#125;&#125;) PS：如果想用手动唤起图片的上传，可以通过点击事件12345toUploadImg:function()&#123; console.log(&quot;上传图片&quot;); $(&quot;.uploadInput&quot;).click(); &#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello-word]]></title>
    <url>%2F2018%2F02%2F28%2Fhello-word%2F</url>
    <content type="text"><![CDATA[琢磨了两天，总算是把博客搭建起来了。感觉很不容易啊~具体方法如下：安装hexo（1）安装好应用程序git、nodeJS（2）用npm安装hexo12$ npm install -g hexo-cli$ npm install hexo --save（3）hexo的相关配置123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install（4）生成静态文件，并本地启动服务器12$ hexo generate$ hexo server 将hexo发布在github 上首先需要在github上创建账号，新建一个repository 。新建repository的名字应当为 “你的github用户名.github.io”配置ssh key配置根目录中_config.yml中有关deploy的部分：123deploy: type: git repo: git@github.com:kangxiaoxiao/kangxiaoxiao.github.io.git错误写法：1234deploy: type: github repository: https://github.com/liuxianan/liuxianan.github.io.git branch: master因为后面一种写法是hexo2.x的写法，现在已经不行了安装插件hexo-deployer-git1npm install hexo-deployer-git --save代码提交1$ hexo d提交成功后会如图所示： 新建一篇博客并提交到github12$ hexo new post &quot;hello-word&quot;$ hexo d -g到这里就可以测试访问啦地址：https://kangxiaoxiao.github.io/更换主题首先需要下载主题:123$ cd 根文件夹$ git clone https://github.com/th720309/hexo-theme-believe.git themes/hexo-theme-believe$ npm install --save hexo-renderer-sass修改根文件中_config.yml中的theme: landscape改为theme: hexo-theme-believe，然后重新执行hexo g来重新生成。如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 hexo官方文档：https://hexo.io/zh-cn/docs/]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
